from datetime import datetime
from typing import Dict, List, Optional, Any, Literal, Tuple

from pydantic import BaseModel, Field

from app.schemas.common import CodeSnapshot, ContainerConfig, DockerContainer

class DebuggingPayload(BaseModel):
    """Schema for the incoming debugging payload from Cline."""
    context: str = Field(description="Background information relevant to the debugging task")
    error: str = Field(description="Description of the error/problem")
    logs: str = Field(description="Terminal or console logs from test runs")
    codebase: Dict[str, str] = Field(description="Updated code files (path -> content)")
    session_id: Optional[str] = None

class DebuggingSession(BaseModel):
    """Model for storing debugging session data."""
    id: str
    context: str
    error: str
    logs: str
    snapshot: CodeSnapshot
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    metadata: Optional[Dict[str, Any]] = None


class StackFrame(BaseModel):
    """Model for a stack frame from an error trace."""
    file: str
    line: int
    function: str
    context: Optional[str] = None


class ExecutionContext(BaseModel):
    """Model for the context in which a command is executed."""
    container: DockerContainer
    working_directory: str = "/"
    env: Dict[str, Any] = Field(default_factory=dict)
    timeout: int = 30000  # milliseconds


class ExecutionResult(BaseModel):
    """Model for the result of executing a command."""
    exit_code: int
    stdout: str
    stderr: str
    logs: str
    duration: int  # milliseconds
    error: Optional[str] = None
    stack_trace: Optional[List[StackFrame]] = None


class DebugIssue(BaseModel):
    """Model for a debugging issue."""
    summary: str
    details: str
    severity: Literal["low", "medium", "high", "critical"]


class SuspiciousLine(BaseModel):
    """Model for a line of code that may be causing an issue."""
    file: str
    line: int
    reason: str


class AnalysisResult(BaseModel):
    """Model for the result of analyzing execution output."""
    root_cause: str
    related_files: List[str]
    suspicious_lines: List[SuspiciousLine]


class FixOption(BaseModel):
    """Model for a proposed fix to a debugging issue."""
    description: str
    changes: List[Dict[str, str]]  # file, original, replacement
    confidence: float  # 0-1
    reasoning: str


class DebugReport(BaseModel):
    """Model for a debug report generated by the LLM."""
    issue: DebugIssue
    analysis: AnalysisResult
    fixes: List[FixOption]
    explanation: str


class DebugOptions(BaseModel):
    """Options for a debugging session."""
    commands: List[str]
    timeout: int = 60000  # milliseconds
    container_config: ContainerConfig = Field(default_factory=ContainerConfig)
    analysis_options: Dict[str, Any] = Field(default_factory=dict)


class DebugSession(BaseModel):
    """Model for a debugging session."""
    id: str
    code_snapshot: CodeSnapshot
    container: Optional[DockerContainer] = None
    execution_results: List[ExecutionResult] = Field(default_factory=list)
    debug_reports: List[DebugReport] = Field(default_factory=list)
    status: Literal["initializing", "analyzing", "debugging", "completed", "failed"]
    start_time: datetime
    end_time: Optional[datetime] = None


# API Request/Response Models

class DebugRequest(BaseModel):
    """Request model for creating a debugging session."""
    codebase_path: str
    commands: List[str]
    timeout: Optional[int] = None
    container_config: Optional[ContainerConfig] = None
    analysis_options: Optional[Dict[str, Any]] = None


class DebugSessionResponse(BaseModel):
    """Response model for a debugging session."""
    id: str
    status: str
    start_time: datetime
    end_time: Optional[datetime] = None
    execution_results: List[Dict[str, Any]] = Field(default_factory=list)
    debug_reports: List[Dict[str, Any]] = Field(default_factory=list)

    @classmethod
    def from_model(cls, session: DebugSession) -> "DebugSessionResponse":
        """Create a response model from a DebugSession model."""
        return cls(
            id=session.id,
            status=session.status,
            start_time=session.start_time,
            end_time=session.end_time,
            execution_results=[result.dict() for result in session.execution_results],
            debug_reports=[report.dict() for report in session.debug_reports],
        )


class ContinueSessionRequest(BaseModel):
    """Request model for continuing a debugging session."""
    commands: List[str]


class ApplyFixRequest(BaseModel):
    """Request model for applying a proposed fix."""
    fix_index: int


class ApplyFixResponse(BaseModel):
    """Response model for applying a fix."""
    success: bool
    message: str
    modified_files: List[str] = Field(default_factory=list)
